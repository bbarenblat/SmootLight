package packet;

import org.junit.Assert;
import org.junit.Test;
/**
 * JUnit test for ClientToServerPacket.
 * @author seojin
 *
 */
public class ClientToServerPacketTest extends ClientToServerPacket{
	
	/* PROTOCOL to test
	Packet ::= AdministrativePacket | ConversationalPacket
	AdministrativePacket ::= (defaultID | clientID) \t unaryAction \t screenName?
	ConversationalPacket ::= clientID \t actionType \t (ConversationID | clientID)  \n  Message?
	actionType ::= OpenConversation | ExitConversation | sendMessage | InviteUser | acceptInvitation | rejectInvitation
	unaryAction ::= logIn | logOut | changeScreenName | requestWholeUserList
	 **optional clientID(with choice of conversationID after actionType) only follows openConversation and InviteUser.
	 **defaultID is only followed by logIn and screenName.
	 */
	
	/**
	 * Testing for Admin type.
	 */
	@Test
	public void AdminTest(){
		Admin p;
		ClientToServerPacket p2;
		p = new Admin(true, UnaryAction.logIn, "seojin");
		System.out.print(p.packetToText());
		p2 = ClientToServerPacket.parsePacket(p.packetToText());
		Assert.assertTrue(p.packetToText().equals(p2.packetToText()));
		p = new Admin(12, UnaryAction.changeScreenName, "Seo Jin");
		System.out.print(p.packetToText());
		p2 = ClientToServerPacket.parsePacket(p.packetToText());
		Assert.assertTrue(p.packetToText().equals(p2.packetToText()));
		p = new Admin(12, UnaryAction.requestWholeUserList);
		System.out.print(p.packetToText());
		p2 = ClientToServerPacket.parsePacket(p.packetToText());
		Assert.assertTrue(p.packetToText().equals(p2.packetToText()));
		p = new Admin(12, UnaryAction.logOut);
		System.out.print(p.packetToText());
		p2 = ClientToServerPacket.parsePacket(p.packetToText());
		Assert.assertTrue(p.packetToText().equals(p2.packetToText()));
	}
	/**
	 * Testing for Conversation type.
	 */
	@Test
	public void ConvTest(){
		Conv p;
		ClientToServerPacket p2;
		p = new Conv(12, CSActionType.acceptInvitation, 1001);
		System.out.print(p.packetToText());
		p2 = ClientToServerPacket.parsePacket(p.packetToText());
		Assert.assertTrue(p.packetToText().equals(p2.packetToText()));
		p = new Conv(12, CSActionType.rejectInvitation, 1001);
		System.out.print(p.packetToText());
		p2 = ClientToServerPacket.parsePacket(p.packetToText());
		Assert.assertTrue(p.packetToText().equals(p2.packetToText()));
		p = new Conv(12, CSActionType.InviteUser, 1111, 13);
		System.out.print(p.packetToText());
		p2 = ClientToServerPacket.parsePacket(p.packetToText());
		Assert.assertTrue(p.packetToText().equals(p2.packetToText()));
		p = new Conv(12, CSActionType.ExitConversation, 1001);
		System.out.print(p.packetToText());
		p2 = ClientToServerPacket.parsePacket(p.packetToText());
		Assert.assertTrue(p.packetToText().equals(p2.packetToText()));
		p = new Conv(12, CSActionType.sendMessage, 1001, "hi all!!\nI am UJIN\thaha");
		System.out.print(p.packetToText());
		p2 = ClientToServerPacket.parsePacket(p.packetToText());
		Assert.assertTrue(p.packetToText().equals(p2.packetToText()));
		
	}
	
}
